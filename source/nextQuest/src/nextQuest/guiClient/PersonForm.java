package nextQuest.guiClient;

import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.rmi.RemoteException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import nextQuest.ifc.Static;
import nextQuest.ifc.iPrivilegedRole;
import nextQuest.ifc.iRoleAdmin;
import nextQuest.ifc.iRolePersonalist;
import nextQuest.ifc.iUser;
import nextQuest.ifc.iUserManagerAdmin;
import nextQuest.ifc.nqException;
import nextQuest.mock.UserManagerAdminMock;
import nextQuest.server.Ability;
import nextQuest.server.User;
import nextQuest.server.UserInfo;
import nextQuest.server.UserManager;

public class PersonForm extends javax.swing.JDialog {
    Frame parent;
    iUserManagerAdmin uma = null;
    UserInfo usrInf = null;

    /** Creates new form NewJDialog */
    public PersonForm(java.awt.Frame parent, boolean modal, iUserManagerAdmin uma, UserInfo usrInf) throws RemoteException {
        super(parent, modal);
        this.parent = parent;
        this.uma = uma;
        this.usrInf = usrInf;

        // inicializace dialogu
        initComponents();
        generatePassword();
        initializeAblities();

        if(usrInf != null) {
            t_login.setText(usrInf.getLoginName());
            t_name.setText(usrInf.getName());
            c_leader.setSelected(usrInf.getPermissionLeader());
            c_personalist.setSelected(usrInf.getPermissionPersonalist());
            // TODO nastaven√≠ abilit
            generatePassword();
        }

        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(screen.width / 2 - getWidth() / 2, screen.height / 2 - getHeight() / 2);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b_save = new javax.swing.JButton();
        b_ability_editor = new javax.swing.JButton();
        b_add_ability = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        t_login = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        t_name = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        b_cancel = new javax.swing.JButton();
        c_generate_password = new javax.swing.JCheckBox();
        l_authorization = new javax.swing.JLabel();
        c_personalist = new javax.swing.JCheckBox();
        t_password = new javax.swing.JTextField();
        c_leader = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        p_abilities = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Person form");
        setModal(true);
        setResizable(false);

        b_save.setText("Save");
        b_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_saveActionPerformed(evt);
            }
        });

        b_ability_editor.setText("Ability editor...");
        b_ability_editor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_ability_editorActionPerformed(evt);
            }
        });

        b_add_ability.setText("Add one more ability...");
        b_add_ability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_add_abilityActionPerformed(evt);
            }
        });

        jLabel3.setText("Initial password:");

        jLabel2.setText("Login:");

        t_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_nameActionPerformed(evt);
            }
        });
        t_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_nameKeyTyped(evt);
            }
        });

        jLabel1.setText("Name:");

        b_cancel.setText("Cancel");
        b_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelActionPerformed(evt);
            }
        });

        c_generate_password.setSelected(true);
        c_generate_password.setText("generate password");
        c_generate_password.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                c_generate_passwordItemStateChanged(evt);
            }
        });

        l_authorization.setText("Authorization:");

        c_personalist.setText("personalist");

        t_password.setEditable(false);
        t_password.setForeground(new java.awt.Color(255, 0, 0));

        c_leader.setText("leader");

        jLabel4.setText("Abilities:");

        p_abilities.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane1.setViewportView(p_abilities);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(t_name, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                            .addComponent(t_login, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(c_generate_password)
                                .addGap(72, 72, 72))
                            .addComponent(t_password)))
                    .addComponent(jLabel4)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                    .addComponent(c_leader)
                    .addComponent(c_personalist)
                    .addComponent(l_authorization)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_add_ability)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(b_ability_editor))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(b_cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_save)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(t_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(t_login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(t_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(c_generate_password)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(l_authorization)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(c_personalist)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(c_leader)
                .addGap(14, 14, 14)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_add_ability)
                    .addComponent(b_ability_editor))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_save)
                    .addComponent(b_cancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_saveActionPerformed
        try {
            if(t_name.getText().length() < 3 || t_name.getText().length() > 40) {
                JOptionPane.showMessageDialog(null, "Length of a name must be between 3 and 40 characters...", "Input error", JOptionPane.ERROR_MESSAGE);
                return;
            } else if (t_login.getText().length() < 3 || t_login.getText().length() > 20) {
                JOptionPane.showMessageDialog(null, "Length of a login must be between 3 and 20 characters...", "Input error", JOptionPane.ERROR_MESSAGE);
                return;
            } else if (t_password.getText().length() < 3 || t_login.getText().length() > 10) {
                JOptionPane.showMessageDialog(null, "Length of a password must be between 3 and 10 characters...", "Input error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(usrInf == null) {
                uma.createUser(t_login.getText(), t_name.getText(), Static.MD5(t_password.getText()), c_leader.isSelected(), c_personalist.isSelected());
            } else {
                User u = new User(usrInf.getID(), usrInf.getLoginName(), usrInf.getName(), usrInf.getPermissionAdmin(), usrInf.getPermissionLeader(), usrInf.getPermissionPersonalist(), null);
                uma.editUser(u, t_login.getText(), t_name.getText(), Static.MD5(t_password.getText()), c_personalist.isSelected(), c_leader.isSelected());
            }
            // nastaven√≠ schopnost√≠ u≈æivateli
            ArrayList<Ability> abilities = new ArrayList<Ability>();
            for(int i=0; i<p_abilities.getComponentCount(); i++) {
                Ability a = ((AbilitiesRow) p_abilities.getComponent(i)).getSelectedAbility();
                if(a != null) abilities.add(a);
            }
            // zji≈°tƒõn√≠ posledn√≠ho p≈ôidan√©ho pomoc√≠ nejvy≈°≈°√≠ho ID
            List<UserInfo> users = (List<UserInfo>) Arrays.asList(uma.listAllUsers());
            Collections.sort(users, new Comparator<UserInfo>(){
                @Override
                public int compare(UserInfo o1, UserInfo o2) {
                    return o2.getID()-o1.getID(); // se≈ôazen√≠ podle ID sestupnƒõ
                }
            });
            UserInfo usrInf = users.get(0);
            iUser usr = new User(usrInf.getID(),
                    usrInf.getName(),
                    usrInf.getLoginName(),
                    usrInf.getPermissionAdmin(),
                    usrInf.getPermissionLeader(),
                    usrInf.getPermissionPersonalist(),
                    null);
            uma.updateUserAbilities(usr, abilities.toArray(new Ability[0]));

            dispose();
        } catch (RemoteException ex) {
            Logger.getLogger(PersonForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (nqException ex) {
            Logger.getLogger(PersonForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException nse) {
            System.out.println("Java sux!");
        }
}//GEN-LAST:event_b_saveActionPerformed

    private void b_ability_editorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_ability_editorActionPerformed
        AbilityEditor abilityEditor = new AbilityEditor(parent, true, uma);
        try {
            initializeAblities();
        } catch (RemoteException ex) {
            Logger.getLogger(PersonForm.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_b_ability_editorActionPerformed

    private void t_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_nameActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_t_nameActionPerformed

    private void t_nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_nameKeyTyped
        if(c_generate_password.isSelected()) generatePassword();
}//GEN-LAST:event_t_nameKeyTyped

    private void b_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelActionPerformed
        dispose();
}//GEN-LAST:event_b_cancelActionPerformed

    private void c_generate_passwordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_c_generate_passwordItemStateChanged
        t_password.setEditable(!c_generate_password.isSelected());
        if(!c_generate_password.isSelected()) {
            t_password.selectAll();
        } else generatePassword();
    }//GEN-LAST:event_c_generate_passwordItemStateChanged

    private void b_add_abilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_add_abilityActionPerformed
        try {
            p_abilities.add(new AbilitiesRow(uma));
        } catch (RemoteException ex) {
            Logger.getLogger(PersonForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        p_abilities.updateUI();
    }//GEN-LAST:event_b_add_abilityActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_ability_editor;
    private javax.swing.JButton b_add_ability;
    private javax.swing.JButton b_cancel;
    private javax.swing.JButton b_save;
    private javax.swing.JCheckBox c_generate_password;
    private javax.swing.JCheckBox c_leader;
    private javax.swing.JCheckBox c_personalist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel l_authorization;
    private javax.swing.JPanel p_abilities;
    private javax.swing.JTextField t_login;
    private javax.swing.JTextField t_name;
    private javax.swing.JTextField t_password;
    // End of variables declaration//GEN-END:variables

    private void generatePassword() {
        try {
            t_password.setText(Static.MD5(t_name.getText()).substring(0, 10));
        } catch (nqException ex) {
            Logger.getLogger(PersonForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(PersonForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initializeAblities() throws RemoteException {
        if(p_abilities.getComponentCount()!=0) {
            for(int i=0; i<p_abilities.getComponentCount(); i++) {
                ((AbilitiesRow) p_abilities.getComponent(i)).updateRow();
            }
        } else {
            for(int i=0; i<3; i++) {
                p_abilities.add(new AbilitiesRow(uma));
            }
        }
    }

}
