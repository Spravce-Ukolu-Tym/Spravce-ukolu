package nextQuest.guiClient;

import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import nextQuest.ifc.iUserManager;
import nextQuest.ifc.nqException;
import nextQuest.server.Ability;

public class AbilitiesRow extends javax.swing.JPanel {
    private iUserManager uma;
    private Ability[] abilities;

    /** Creates new form AbilitiesRow */
    public AbilitiesRow(iUserManager uma) throws RemoteException {
        this.uma = uma;

        initComponents();
        initializeRow();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        com_ability = new javax.swing.JComboBox();
        com_levels = new javax.swing.JComboBox();

        com_ability.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        com_levels.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(com_ability, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(com_levels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(com_ability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(com_levels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox com_ability;
    private javax.swing.JComboBox com_levels;
    // End of variables declaration//GEN-END:variables

    private void initializeRow() throws RemoteException {
        try {
            abilities = uma.listAblities();
            com_ability.removeAllItems();
            com_levels.removeAllItems();
            com_ability.addItem("none");
            for (Ability ability : abilities) {
                com_ability.addItem(ability.getName());
            }
            for (int i=0; i<5; i++) {
                com_levels.addItem("level "+(i+1));
            }
        } catch (nqException ex) {
            Logger.getLogger(AbilitiesRow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateRow() throws RemoteException {
        //uchovat si vybrané možnosti
        Ability selectedAbility = null;
        int selectedIndex = com_ability.getSelectedIndex()-1; // -1 kvůli volbě none
        if(selectedIndex >= 0) {
            selectedAbility = abilities[selectedIndex];
        }
        int selectedLevel = com_levels.getSelectedIndex();

        initializeRow();

        // znovu nastavit výběr
        if(selectedIndex >= 0) {
            //com_ability.setSelectedIndex(0);
            for (int i=0; i<abilities.length; i++) {
                if(abilities[i].equals(selectedAbility)) {
                    selectedIndex=i;
                    com_ability.setSelectedIndex(selectedIndex+1);
                    com_levels.setSelectedIndex(selectedLevel);
                    break;
                }
            } 
        }
    }

    public Ability getSelectedAbility() {
        int selectedIndex = com_ability.getSelectedIndex()-1; // -1 kvůli volbě none
        if(selectedIndex < 0) return null;
        else {
            Ability abl = new Ability(abilities[selectedIndex].getName(),
                                      abilities[selectedIndex].getDescription(),
                                      com_levels.getSelectedIndex()+1);
            return abl;
        }
    }

    public JComboBox getComboAbilityName() {
        return com_ability;
    }

    public JComboBox getComboAbilityLevel() {
        return com_levels;
    }
}
